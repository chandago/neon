# NeON Build File (http://github.com/c4s4/neon)

doc: Build file for Go projects
default: [lint, test]

properties:
  NAME: 'UNKNOWN'
  VERSION: 'UNKNOWN'
  BUILD_DIR: 'build'
  PACKAGE: './...'
  PACKAGE_DIR: '.'
  VERSION_PATH: 'main.Version'
  GOTOOLS:
  - github.com/mitchellh/gox@latest
  - github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  - github.com/intercloud/gobinsec@latest
  TEST_CASES: =PACKAGE
  TEST_OPTS: ['-cover']
  RUN_ARGS: []
  DOCKER_TAG: '={NAME}:latest'
  GOBINSEC_ENABLED: false

targets:

  tools:
    doc: "Install tools"
    steps:
    - 'gotools = env("GOTOOLS"); if gotools == "" { gotools = env("GOPATH") }'
    - for: tool
      in:  GOTOOLS
      do:
      - print: "Getting tool ={tool}"
      - $: 'GOPATH=={gotools} go install ={tool}'

  lint:
    doc: "Lint code with golangci-lint"
    steps:
    - print: "Linting Go code"
    - $: ['golangci-lint', 'run', =PACKAGE]
    - print: '={color("Green", "OK")} go code checked'

  fmt:
    doc: "Format Go code"
    steps:
    - print: "Formatting Go source files"
    - $: ['gofmt', '-s', '-w', =PACKAGE_DIR]
    - print: '={color("Green", "OK")} go code well formatted'

  test:
    doc: "Run Go tests"
    steps:
    - $: ['go', 'test']
      +: =TEST_OPTS+TEST_CASES
    - print: '={color("Green", "OK")} unit tests pass'

  gobinsec:
    doc: "Check binary for vulnerabilities"
    steps:
    - if: GOBINSEC_ENABLED
      then:
      - $: 'gobinsec -config .gobinsec.yml -wait $(find ={BUILD_DIR}/* -perm -u+x)'
      - print: '={color("Green", "OK")} go code checked for vulnerabilities'
      else:
      - print: "Gobinsec check disabled"

  clean:
    doc: "Clean build directory and Go test cache"
    steps:
    - delete: =BUILD_DIR
    - $: ['go', 'clean', '-testcache']

  build:
    doc: "Build binary for current platform"
    steps:
    - mkdir: =BUILD_DIR
    - print: "Generating binary in ={BUILD_DIR}/={NAME}"
    - $: ['go', 'build', '-o', '={BUILD_DIR}',
          '-ldflags', '-X ={VERSION_PATH}=={VERSION} -s -f',
          =PACKAGE]

  binaries:
    doc: "Make binaries for all platforms"
    steps:
    - $:  'go tool dist list | grep -v android | grep -v dragonfly | grep -v plan9 | grep -v solaris'
      1=: GOOSARCH
      1x: true
    - 'GOOSARCH = replace(GOOSARCH, "\n", " ")'
    - mkdir: '={BUILD_DIR}/bin'
    - $: ['gox', '-ldflags', '-X ={VERSION_PATH}=={VERSION} -s -f',
          '-osarch="={GOOSARCH}"',
          '-output=={BUILD_DIR}/bin/{{.Dir}}-{{.OS}}-{{.Arch}}',
          =PACKAGE]

  docker:
    doc: "Build Docker image"
    steps:
    - $: >
        docker build
        --build-arg GOPRIVATE=$GOPRIVATE
        --build-arg SFBX_GIT_USERNAME=$SFBX_GIT_USERNAME
        --build-arg SFBX_GIT_PASSWORD=$SFBX_GIT_PASSWORD
        --tag ={DOCKER_TAG}
        .

  install:
    doc: "Build and install binary in GOPATH"
    steps:
    - 'path = joinpath(split(env("GOPATH"), ":")[0], "bin")'
    - print: 'Building and installing binary in ={path}'
    - $: ['go', 'build', '-o', =path, '-ldflags', '-s -f', =PACKAGE]

  run:
    doc: Run Go tool
    depends: build
    steps:
    - $: ['={BUILD_DIR}/={NAME}']
      +: =RUN_ARGS
