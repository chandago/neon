# Build Rust project
# Using tool toml installed with `cargo install toml-cli`

default: [fmt, lint, test]
extends:
- chandago/neon/common.yml

properties:
  NAME:       '={filename(_BASE)}'
  VERSION:    'draft'
  BUILD_DIR:  'target'
  ARGS:       []
  TESTS:      []
  BIN_NAMES:  [=NAME]
  BIN_DIR:    'binaries'
  BIN_FILES:  '*'
  ARC_DIR:    'archive'
  ARC_FILES:
    =_BASE: ['README*', 'LICENSE*']
  DOCKER_TAG: '={NAME}:latest'
  DOCKER_OPTIONS: ''
  TARGETS:
    aarch64-unknown-linux-gnu: linux-arm64
    x86_64-unknown-linux-gnu: linux-amd64
    aarch64-apple-darwin: darwin-arm64
    x86_64-apple-darwin: darwin-amd64
    x86_64-pc-windows-gnu: windows-amd64

targets:

  fmt:
    depends: env
    doc: "Format Rust code"
    steps:
    - $: [cargo, fmt]

  lint:
    depends: env
    doc: "Lint Rust code"
    steps:
    - $: [cargo, check]

  test:
    doc: "Run Rust tests"
    steps:
    - $: [cargo, test]
      +: =TESTS
    - if: 'lowercase(env("TEST_IGNORED")) in ["true", "yes", "on", "1"]'
      then:
      - $: [cargo, test, --, --ignored]
        +: =TESTS

  audit:
    doc: "Audit creates for vulnerabilities (install with `cargo install cargo-audit`)"
    steps:
    - $: [cargo, audit]

  update:
    doc: "Update Rust dependencies"
    steps:
    - $: [cargo, update]

  mod:
    doc: "List Rust modules"
    steps:
    - $: [cargo, modules, structure]

  build:
    depends: env
    doc: "Build Rust project for release"
    steps:
    - $: [cargo, build, --release]

  install:
    depends: env
    doc: "Install Rust binary in ~/.cargo/bin"
    steps:
    - $: [cargo, install, --path, .]

  run:
    doc: "Run Rust project"
    steps:
    - $: [cargo, run]
      +: =ARGS

  binaries:
    depends: env
    doc: "Build binaries for all targets"
    steps:
    - mkdir: '={BUILD_DIR}/={BIN_DIR}'
    - for: target
      in:  =keys(TARGETS)
      do:
      - 'target_name = TARGETS[target]'
      - print: "Building for target ={target_name}..."
      - $: [cross, build, --release, --target, =target]
      - for: bin_name
        in: =BIN_NAMES
        do:
        - copy:  '={BUILD_DIR}/={target}/release/={bin_name}'
          tofile: '={BUILD_DIR}/={BIN_DIR}/={bin_name}-={target_name}'
        - copy:  '={BUILD_DIR}/={target}/release/={bin_name}.exe'
          tofile: '={BUILD_DIR}/={BIN_DIR}/={bin_name}-={target_name}.exe'

  version:
    doc: "Confirm version from Cargo.toml"
    steps:
    - $: [toml, get, Cargo.toml, package.version, --raw]
      1=: VERSION
      1x: true
    - print: "You are about to release version ={VERSION}"
    - prompt: "OK (y/n)?"
      to: confirm
      default: "y"
      pattern: "^[YyNn]$"
      error: "Please answer y or n"
    - if: 'confirm != "y" && confirm != "Y"'
      then:
      - throw: "Release aborted"

  clean:
    doc: "Clean generated files"
    steps:
    - $: [cargo, clean]

  env:
    doc: "Set environment variables"
    steps:
    - if: '_OS == "darwin" && _ARCH == "arm64"'
      then:
      - setenv: 'CROSS_CONTAINER_OPTS'
        value:  '--platform linux/amd64'
